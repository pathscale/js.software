name: Build Signed Android APK

on:
  #   push:
  #     branches: [master]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    outputs:
      apk-path: ${{ steps.find-apk.outputs.apk-path }}
      bundle-id: ${{ steps.config.outputs.bundle-id }}
      app-name: ${{ steps.config.outputs.app-name }}
      artifact-name: ${{ steps.config.outputs.artifact-name }}
      version: ${{ steps.config.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK Licenses
        run: yes | sdkmanager --licenses

      - name: Install Android NDK
        run: sdkmanager --install "ndk;25.2.9519653"

      - name: Install dependencies
        run: bun install --frozen

      - name: Set Version
        id: version
        shell: bash
        run: |
          VERSION="1.0.${GITHUB_RUN_NUMBER}"
          echo "Version: $VERSION"
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build frontend
        run: bun run build:apps

      - name: Extract project configuration
        id: config
        run: |
          # Read identifier and app name from Tauri config
          BUNDLE_ID=$(jq -r '.identifier' src-tauri/tauri.conf.json)
          APP_NAME=$(jq -r '.productName' src-tauri/tauri.conf.json)

          echo "bundle-id=$BUNDLE_ID" >> $GITHUB_OUTPUT
          echo "app-name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

          echo "📋 Detected Bundle ID: $BUNDLE_ID"
          echo "📋 Detected App Name: $APP_NAME"

          # Generate keystore name from bundle ID
          PART1=$(echo "$BUNDLE_ID" | cut -d'.' -f1)
          PART2=$(echo "$BUNDLE_ID" | cut -d'.' -f2)  
          PART3=$(echo "$BUNDLE_ID" | cut -d'.' -f3)
          PART_COUNT=$(echo "$BUNDLE_ID" | tr '.' '\n' | wc -l)

          if [ "$PART_COUNT" -eq 3 ]; then
            if [ "$PART1" = "com" ]; then
              KEYSTORE_NAME="${PART2}-${PART3}-release.jks"
            else
              KEYSTORE_NAME="${PART2}-${PART3}-release.jks"
            fi
          elif [ "$PART_COUNT" -eq 4 ]; then
            PART4=$(echo "$BUNDLE_ID" | cut -d'.' -f4)
            KEYSTORE_NAME="${PART2}-${PART3}-${PART4}-release.jks"
          else
            KEYSTORE_NAME="${BUNDLE_ID//\./-}-release.jks"
          fi

          echo "KEYSTORE_NAME=$KEYSTORE_NAME" >> $GITHUB_ENV
          echo "📋 Generated Keystore Name: $KEYSTORE_NAME"

          # Generate artifact name from app name
          ARTIFACT_NAME=$(echo "$APP_NAME" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')-android-${{ github.run_number }}
          echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "📋 Generated Artifact Name: $ARTIFACT_NAME"

      - name: Initialize Android project
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
          NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
        run: bun run tauri android init

      - name: Add signing configuration to build.gradle.kts
        working-directory: src-tauri/gen/android/app
        run: |
          echo "Creating build.gradle.kts with signing configuration..."

          cat > build.gradle.kts << 'EOF'
          import java.util.Properties
          import java.io.FileInputStream

          plugins {
              id("com.android.application")
              id("org.jetbrains.kotlin.android")
              id("rust")
          }

          val tauriProperties = Properties().apply {
              val propFile = file("tauri.properties")
              if (propFile.exists()) {
                  propFile.inputStream().use { load(it) }
              }
          }

          android {
              compileSdk = 34
              namespace = "${{ env.BUNDLE_ID }}"
              defaultConfig {
                  manifestPlaceholders["usesCleartextTraffic"] = "false"
                  applicationId = "${{ env.BUNDLE_ID }}"
                  minSdk = 24
                  targetSdk = 34
                  versionCode = tauriProperties.getProperty("tauri.android.versionCode", "1").toInt()
                  versionName = tauriProperties.getProperty("tauri.android.versionName", "1.0")
              }

              signingConfigs {
                  create("release") {
                      val keystorePropertiesFile = rootProject.file("keystore.properties")
                      val keystoreProperties = Properties()
                      if (keystorePropertiesFile.exists()) {
                          keystoreProperties.load(FileInputStream(keystorePropertiesFile))
                          
                          keyAlias = keystoreProperties["keyAlias"] as String
                          keyPassword = keystoreProperties["keyPassword"] as String
                          storeFile = file(keystoreProperties["storeFile"] as String)
                          storePassword = keystoreProperties["storePassword"] as String
                      }
                  }
              }

              buildTypes {
                  getByName("debug") {
                      manifestPlaceholders["usesCleartextTraffic"] = "true"
                      isDebuggable = true
                      isJniDebuggable = true
                      isMinifyEnabled = false
                      packaging {                
                          jniLibs.keepDebugSymbols.add("*/arm64-v8a/*.so")
                          jniLibs.keepDebugSymbols.add("*/armeabi-v7a/*.so")
                          jniLibs.keepDebugSymbols.add("*/x86/*.so")
                          jniLibs.keepDebugSymbols.add("*/x86_64/*.so")
                      }
                  }
                  getByName("release") {
                      isMinifyEnabled = true
                      proguardFiles(
                          *fileTree(".") { include("**/*.pro") }
                              .plus(getDefaultProguardFile("proguard-android-optimize.txt"))
                              .toList().toTypedArray()
                      )
                      signingConfig = signingConfigs.getByName("release")
                  }
              }
              kotlinOptions {
                  jvmTarget = "1.8"
              }
              buildFeatures {
                  buildConfig = true
              }
          }

          rust {
              rootDirRel = "../../../"
          }

          dependencies {
              implementation("androidx.webkit:webkit:1.6.1")
              implementation("androidx.appcompat:appcompat:1.6.1")
              implementation("com.google.android.material:material:1.8.0")
              testImplementation("junit:junit:4.13.2")
              androidTestImplementation("androidx.test.ext:junit:1.1.4")
              androidTestImplementation("androidx.test.espresso:espresso-core:3.5.0")
          }

          apply(from = "tauri.build.gradle.kts")
          EOF

          echo "✅ Created build.gradle.kts with signing configuration"

      - name: Setup Android signing
        working-directory: src-tauri/gen/android
        run: |
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          echo "storePassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=./${{ env.KEYSTORE_NAME }}" >> keystore.properties

          # Copy keystore to the app directory where Gradle expects it
          cp $RUNNER_TEMP/keystore.jks ./app/${{ env.KEYSTORE_NAME }}

          echo "=== Keystore Properties File ==="
          cat keystore.properties
          echo "=== Keystore File Info ==="
          ls -la ./app/${{ env.KEYSTORE_NAME }}

      - name: Build Android app
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
          NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
        run: |
          echo "=== Building signed APK ==="
          bun run tauri android build --apk

          echo "=== Checking build outputs ==="
          find src-tauri/gen/android -name "*.apk" -type f -exec ls -la {} \;

      - name: Find APK location
        id: find-apk
        run: |
          echo "Searching for APK files:"
          find src-tauri -name "*.apk" -type f | tee apk-files.txt

          # Look for release APK with multiple patterns
          APK_PATH=$(find src-tauri -name "*release*.apk" -type f | head -n 1)
          if [ -z "$APK_PATH" ]; then
            # Fallback: look for any APK in release directory
            APK_PATH=$(find src-tauri -path "*/release/*" -name "*.apk" -type f | head -n 1)
          fi
          if [ -z "$APK_PATH" ]; then
            # Fallback: look for APK in build outputs
            APK_PATH=$(find src-tauri/gen/android -name "*.apk" -type f | head -n 1)
          fi

          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK file found!"
            echo "Found files:"
            cat apk-files.txt
            exit 1
          fi

          echo "apk-path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "Found release APK at: $APK_PATH"
          ls -la "$APK_PATH"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.APK_PATH }}
          retention-days: 7
          if-no-files-found: error

      - name: Build Summary
        run: |
          echo "🎉 Android Build Complete!"
          echo "📱 Bundle ID: ${{ env.BUNDLE_ID }}"
          echo "📱 App Name: ${{ env.APP_NAME }}"
          echo "🏷️ Version: ${{ steps.version.outputs.version }}"
          echo "📦 Artifact: ${{ env.ARTIFACT_NAME }}"
          echo "📁 APK Path: ${{ env.APK_PATH }}"
          echo "📏 APK Size: $(du -h "${{ env.APK_PATH }}" | cut -f1)"
